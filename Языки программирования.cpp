#include <iostream>
#include <Windows.h> // Для использования руссокй речи в консоли
#include <string>  // Для использования строк
#include <stdio.h> // для работы с массивами
#include <stdlib.h>

using namespace std;

// Функция для проверки, что строка содержит только цифры
static bool isDigitString(const string& input) {
    if (input.empty()) {
        return false;
    }
    size_t start = 0;
    // Если первый символ - это минус, пропускаем его
    if (input[0] == '-') {
        if (input.length() == 1) {
            return false;
        }
        start = 1;
    }
    // Проверка остальных символов на цифры
    for (size_t i = start; i < input.length(); ++i) {
        if (!isdigit(static_cast<unsigned char>(input[i]))) {
            return false;
        }
    }

    return true;
}
void sumLastNums() { // 1 задача
    int flag = 1;
    string input;
    int chislo;
    int cif1;
    int cif2;
    do {
        cout << "Введите целое число x (x > 10): ";
        cin >> input;  // Считываем ввод как строку
        // Проверяем, что строка состоит только из цифр
        if (!isDigitString(input)) {
            cout << "Введите корректное число!\n";
            continue;  // Если не число, просим ввести снова
        }
        // Преобразуем строку в число
        chislo = stoi(input);

        // Проверяем, что число больше 10
        if (chislo <= 10) {
            cout << "Число должно быть больше 10. Попробуйте снова.\n";
        }
        else {
            // Если число больше 10, продолжаем с расчетом суммы цифр
            cif1 = chislo % 10;
            cif2 = (chislo / 10) % 10;
            cout << "Сумма двух последних цифр числа равна: " << cif1 + cif2 << '\n';
            flag = 0;  // Устанавливаем флаг в 0, так как мы нашли корректное число
        }
    } while (flag == 1);
}
int isPositive() {
    int flag = 1;
    string input;
    do {
        cout << "Введите целое число x: ";
        cin >> input;  // Сначала считаем строку
        // Проверяем, что строка состоит только из цифр и может быть отрицательным
        if (!isDigitString(input)) {
            cout << "Введите корректное число!\n";
            continue;
        }
        // Преобразуем строку в число
        int chislo = stoi(input);
        // Проверяем знак числа
        if (chislo > 0) {
            cout << "Вы ввели положительное число.\n";
            return true;
        }
        else if (chislo == 0) {
            cout << "Вы ввели число равное нулю.\n";
            return false;
        }
        else {  // chislo < 0
            cout << "Вы ввели отрицательное число.\n";
            return false;
        }
    } while (flag == 1);
}
int IsBigLetter() { // 3 задача
    char letter;

    cout << "Введите букву в диапозоне от A до Z: ";
    cin >> letter;

    if ('A' <= letter && letter <= 'Z') { // Проверяем находится ли первая буква в диапозоне
        cout << "Результат: True" << "\n";
        return true;
    }
    else {
        cout << "Результат: False" << "\n";
        return false;
    }

    return 0;
}

int isDivisor() { // 2 задача
    int flag = 1;
    string inputx;
    string inputy;
    int chislo1;
    int chislo2;
    do {
        cout << "Введите целое число x: ";
        cin >> inputx;  // Считываем ввод как строку
        // Проверяем, что строка состоит только из цифр
        if (!isDigitString(inputx)) {
            cout << "Введите корректное число!\n";
            continue;  // Если не число, просим ввести снова
        }
        cout << "Введите целое число y: ";
        cin >> inputy;  // Считываем ввод как строку
        // Проверяем, что строка состоит только из цифр
        if (!isDigitString(inputy)) {
            cout << "Введите корректное число!\n";
            continue;  // Если не число, просим ввести снова
        }
        // Преобразуем строки в числа
        chislo1 = stoi(inputx);
        chislo2 = stoi(inputy);

        // Проверка делимости
        if (chislo2 % chislo1 == 0 || chislo1 % chislo2 == 0) {
            cout << "Результат: true\n";
            return true;
        }
        else {
            cout << "Результат: false\n";
            return false;
        }

    } while (flag == 1);

    return false;
}
// Функция для суммы последних цифр двух чисел
int lastNumSum(int a, int b) {
    return (a % 10) + (b % 10); // Извлекаем последние цифры и суммируем
}

int SumLastNum() {
    int result;  // переменная для хранения промежуточного результата
    string input;  // переменная для хранения вводимых чисел в строковом формате
    int num;     // переменная для хранения конвертированных чисел

    // Вводим первое число и проверяем его корректность
    do {
        cout << "Введите число: ";
        cin >> input;
        if (!isDigitString(input)) {
            cout << "Введите корректное число!\n";
            continue;  // Если не число, просим ввести снова
        }
        result = stoi(input);  // Преобразуем строку в число
        break;  // Выходим из цикла после корректного ввода
    } while (true);

    // Выполняем последовательное сложение четырёх других чисел
    for (int i = 0; i < 4; ++i) {
        do {
            cout << "Введите следующее число: ";
            cin >> input;
            if (!isDigitString(input)) {
                cout << "Введите корректное число!\n";
                continue;  // Если не число, просим ввести снова
            }
            num = stoi(input);  // Преобразуем строку в число
            break;  // Выходим из цикла после корректного ввода
        } while (true);

        result = lastNumSum(result, num);  // Суммируем с предыдущим результатом
        cout << "Текущий результат: " << result << endl;
    }

    // Выводим итоговый результат
    cout << "Итоговый результат: " << result << endl;
    return result;
}

int safeDiv() {
    string x; string y;
    int resultx; int resulty;

    do {
        cout << "Введите число x: ";
        cin >> x;
        if (!isDigitString(x)) {
            cout << "Введите корректное число!\n";
            continue;  // Если не число, просим ввести снова
        }
        resultx = stoi(x);  // Преобразуем строку в число
        break;  // Выходим из цикла после корректного ввода
    } while (true);
    do {
        cout << "Введите число y: ";
        cin >> y;
        if (!isDigitString(y)) {
            cout << "Введите корректное число!\n";
            continue;  // Если не число, просим ввести снова
        }
        resulty = stoi(y);  // Преобразуем строку в число
        break;  // Выходим из цикла после корректного ввода
    } while (true);
    if (resulty == 0) {
        cout << "Результат деления x на y: 0 ";
        return 0;
    }
    if (resultx % resulty == 0) {
        cout << "Результат деления x на y: " << resultx / resulty;
    };

    return 0;
}
int makeDecision() {
    string x; string y;
    int resultx; int resulty;

    do {
        cout << "Введите число x: ";
        cin >> x;
        if (!isDigitString(x)) {
            cout << "Введите корректное число!\n";
            continue;  // Если не число, просим ввести снова
        }
        resultx = stoi(x);  // Преобразуем строку в число
        break;  // Выходим из цикла после корректного ввода
    } while (true);
    do {
        cout << "Введите число y: ";
        cin >> y;
        if (!isDigitString(y)) {
            cout << "Введите корректное число!\n";
            continue;  // Если не число, просим ввести снова
        }
        resulty = stoi(y);  // Преобразуем строку в число
        break;  // Выходим из цикла после корректного ввода
    } while (true);
    if (resulty == resultx) {
        cout << resultx << " == " << resulty;
    };
    if (resulty > resultx) {
        cout << resultx << " < " << resulty;
    };
    if (resulty < resultx) {
        cout << resultx << " > " << resulty;
    };

    return 0;
}

// Функция, проверяющая тройную сумму
bool sum3(int x, int y, int z) {
    return (x + y == z) || (x + z == y) || (y + z == x);
}

// Функция для безопасного ввода числа с проверкой
int inputNumber(const string& prompt) {
    string input;
    int number;

    do {
        cout << prompt;
        cin >> input;
        if (!isDigitString(input)) {
            cout << "Введите корректное число!\n";
            continue;  // Если не число, просим ввести снова
        }
        number = stoi(input);  // Преобразуем строку в число
        break;  // Выходим из цикла после корректного ввода
    } while (true);

    return number;
}
void sum3Prompt() {
    int x = inputNumber("Введите число x: ");
    int y = inputNumber("Введите число y: ");
    int z = inputNumber("Введите число z: ");

    if (sum3(x, y, z)) {
        cout << "Результат: true\n";
    }
    else {
        cout << "Результат: false\n";
    }
}
void printDays() {
    string day;
    cout << "Введите день недели: ";
    cin >> day;
    // Приведение строки к нижнему регистру для сравнения
    for (auto& c : day) {
        c = tolower(c);
    }
    if (day == "понедельник") {
        cout << "Вторник\n";
        cout << "Среда\n";
        cout << "Четверг\n";
        cout << "Пятница\n";
        cout << "Суббота\n";
        cout << "Воскресенье\n";
    }
    else if (day == "вторник") {
        cout << "Среда\n";
        cout << "Четверг\n";
        cout << "Пятница\n";
        cout << "Суббота\n";
        cout << "Воскресенье\n";
    }
    else if (day == "среда") {
        cout << "Четверг\n";
        cout << "Пятница\n";
        cout << "Суббота\n";
        cout << "Воскресенье\n";
    }
    else if (day == "четверг") {
        cout << "Пятница\n";
        cout << "Суббота\n";
        cout << "Воскресенье\n";
    }
    else if (day == "пятница") {
        cout << "Суббота\n";
        cout << "Воскресенье\n";
    }
    else if (day == "суббота") {
        cout << "Воскресенье\n";
    }
    else if (day == "воскресенье") {
        cout << "Это последний день недели!\n";
    }
    else {
        cout << "Это не день недели!!\n";
    }
}

string reverseListNums(int x) {
    string result = "";

    // Цикл от x до 0 включительно
    for (int i = x; i >= 0; --i) {
        result += to_string(i);  // Конвертируем число в строку и добавляем к результату
        if (i != 0) {  // Добавляем пробел только между числами
            result += " ";
        }
    }
    return result;
}

int pow() {
    int x, y, result = 1;
    // ввод данных
    x = inputNumber("Введите число x: ");
    y = inputNumber("Введите число y: ");

    // Цикл для возведения в степень
    for (int i = 0; i < y; ++i) {
        result *= x;  // Умножаем результат на x
    }

    return result;
}

bool equalNum() {
    int x;
    x = inputNumber("Введите число x: ");
    int lastDigit = x % 10;  // Берем последнюю цифру
    x /= 10;  // Убираем последнюю цифру

    // Проверяем оставшиеся цифры
    while (x > 0) {
        int currentDigit = x % 10;  // Берем текущую цифру
        if (currentDigit != lastDigit) {
            cout << "Цифры различны.\n";
            return false;
        }
        x /= 10;  // Переходим к следующей цифре
    }

    cout << "Все цифры одинаковы.\n";
    return true;
}

void leftTriangle() {
    int x;
    x = inputNumber("Введите высоту треугольника: ");

    // Вывод треугольника
    for (int i = 1; i <= x; ++i) {
        for (int j = 1; j <= i; ++j) {
            cout << "*";
        }
        cout << endl;
    }
}
void guessGame() {
    srand(time(0));  // Инициализация генератора случайных чисел
    int randomNumber = rand() % 10;  // Генерация случайного числа от 0 до 9
    int userGuess;
    int attempts = 0;

    do {
        userGuess = inputNumber("Введите число от 0 до 9: ");

        attempts++;  // Увеличение счетчика попыток

        if (userGuess == randomNumber) {
            cout << "Вы угадали!" << endl;
            cout << "Вы отгадали число за " << attempts << " попыток." << endl;
        }
        else {
            cout << "Вы не угадали, попробуйте еще раз." << endl;
        }
    } while (userGuess != randomNumber);
}



    string age() {
        int x;
        x = inputNumber("Введите ваш возраст: ");

            string result = to_string(x) + " "; // Начинаем с числа и пробела
        int lastDigit = x % 10; // Последняя цифра
        int lastTwoDigits = x % 100; // Две последние цифры

        // Условие для выбора правильного слова
        if (lastDigit == 1 && lastTwoDigits != 11) {
            result += "год";
        }
        else if ((lastDigit == 2 || lastDigit == 3 || lastDigit == 4) && (lastTwoDigits < 12 || lastTwoDigits > 14)) {
            result += "года";
        }
        else {
            result += "лет";
        }

        cout <<  "Ваш возраст: " << result; // Возвращаем результат
        return 0;
    }


    int main() {
        int num_zad;
        SetConsoleCP(1251);
        SetConsoleOutputCP(1251);
        cout << "Введите число от 1 до 20 чтобы выбрать задачу:\n";
        cout << "1)Сумма знаков. \n";
        cout << "2)Есть ли позитив. \n";
        cout << "3)Большая буква. \n";
        cout << "4)Делитель.  \n";
        cout << "5)Многократный вызов.  \n";
        cout << "6)Безопасное деление.  \n";
        cout << "7)Строка сравнения.  \n";
        cout << "8)Тройная сумма.  \n";
        cout << "9)Вывод дней недели.  \n";
        cout << "10)Числа наоборот.  \n";
        cout << "11)Степень числа.  \n";
        cout << "12)Одинаковость.  \n";
        cout << "13)Левый треугольник.  \n";
        cout << "14)Угадайка.  \n";
        cout << "15)Поиск последнего значения.  \n";
        cout << "16)Добавление в массив.   \n";
        cout << "17)Реверс.    \n";
        cout << "18)Объединение.    \n";
        cout << "19)Удалить негатив.  \n";
        cout << "20)Возраст.  \n";

        cin >> num_zad;

        switch (num_zad) {
        case 1:
            cout << "Вы выбрали следующую задачу: Сумма знаков.\nДана сигнатура функции: sumLastNums(int x)\n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она возвращала результат сложения двух последних знаков числа,\n";
            cout << "предполагая, что знаков в числе не менее двух.\n\n";
            cout << "Пример:\n";
            cout << "x=4568\n";
            cout << "результат: 14\n";
            sumLastNums();
            break;
        case 2:
            cout << "Вы выбрали следующую задачу: Дана сигнатура функции: bool isPositive(int x);\n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она принимала число x и возвращала true, если оно положительное. \n";
            cout << "Пример1:\n";
            cout << "x=3\n";
            cout << "результат: true\n";
            cout << "Пример2:\n";
            cout << "x=-3\n";
            cout << "результат: false\n";
            isPositive();
            break;
        case 3:
            cout << "Вы выбрали следующую задачу:;\n";
            cout << "Дана сигнатура функции: bool isUpperCase (char x); \n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она принимала символ x и возвращала true, если это большая буква в диапазоне от ‘A’ до ‘Z’.  \n";
            cout << "Пример 1: \n";
            cout << "x=’D’ \n";
            cout << "результат: true  \n";
            cout << "Пример 2: \n";
            cout << "x=’q’ \n";
            cout << "результат: false \n";
            IsBigLetter();
            break;

        case 4:
            cout << "Вы выбрали следующую задачу:Дана сигнатура функции: bool isDivisor (int a, int b);\n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она возвращала true, если любое из принятых чисел делит другое нацело. \n";
            cout << "Пример 1: \n";
            cout << "a=3 b=6 \n";
            cout << "результат: true \n";
            cout << "Пример 2: \n";
            cout << "a=2 b=15 \n";
            cout << "результат: false \n";
            isDivisor();
            break;
        case 5:
            cout << "Вы выбрали следующую задачу:Дана сигнатура функции: int lastNumSum(int a, int b);\n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она считала сумму цифр двух  чисел из разряда единиц. \n";
            cout << "Выполните с его помощью последовательное сложение пяти чисел и результат выведите на экран.Постарайтесь выполнить задачу, используя минимально возможное количество вспомогательных переменных. \n";
            cout << "Пример: \n";
            cout << "5+11 это 6 \n";
            cout << "6+123 это 9 \n";
            cout << "9+14 это 13 \n";
            cout << "13+1 это 4 \n";
            cout << "Итого 4 \n";
            SumLastNum();
            break;
        case 6:
            cout << "Вы выбрали следующую задачу:Дана сигнатура функции: double safeDiv (int x, int y);\n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она возвращала деление x на y, и при этом гарантировала, что не будет выкинута ошибка деления на 0. При делении на 0 следует вернуть из функции число 0. Подсказка: смотри ограничения на операции типов данных. \n";
            cout << "Пример 1: \n";
            cout << "x=5 y=0 \n";
            cout << "результат: 0 \n";
            cout << "Пример 2: \n";
            cout << "x=8 y=2 \n";
            cout << "результат: 4  \n";
            safeDiv();
            break;
        case 7:
            cout << "Вы выбрали следующую задачу:Дана сигнатура функции: String makeDecision (int x, int y);\n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она возвращала строку, которая включает два принятых функцией числа и корректно выставленный знак операции сравнения(больше, меньше, или равно). \n";
            cout << "Пример 1: \n";
            cout << "x=5 y=7 \n";
            cout << "результат: “5< 7” \n";
            cout << "Пример 2: \n";
            cout << "x=4 y=4 \n";
            cout << "результат: “4==4” \n";
            makeDecision();
            break;
        case 8:
            cout << "Вы выбрали следующую задачу:Дана сигнатура функции: bool sum3 (int x, int y, int z);\n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она возвращала true, если два  числа(из трех принятых) можно сложить так, чтобы получить третье. \n";
            cout << "Пример 1: \n";
            cout << "x=5 y=7 z=2 \n";
            cout << "результат: true \n";
            cout << "Пример 2: \n";
            cout << "x=8 y=-1 z=4 \n";
            cout << "результат: false \n";
            sum3Prompt();
            break;
        case 9:
            cout << "Вы выбрали следующую задачу:Дана сигнатура функции: void printDays (String x);\n";
            cout << "В качестве параметра функция принимает строку, в которой записано название дня недели.Необходимо реализовать функцию таким образом, чтобы она выводила на экран название переданного в него дня и всех последующих до конца недели дней.Если в качестве строки передан не день, то выводится текст “это не день недели”.Первый день понедельник, последний – воскресенье.Вместо if в данной задаче используйте switch. \n";
            cout << "Пример 1: \n";
            cout << "x=”четверг” \n";
            cout << "результат:  \n";
            cout << "четверг \n";
            cout << "пятница \n";
            cout << "суббота \n";
            cout << "воскресенье \n";
            printDays();
            break;
        case 10:
            int x;
            cout << "Вы выбрали следующую задачу:Дана сигнатура функции: String reverseListNums (int x);\n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она возвращала строку, в которой будут записаны все числа от x до 0 (включительно). \n";
            cout << "Пример: \n";
            cout << "x=5 \n";
            cout << "результат: “5 4 3 2 1 0” \n";
            x = inputNumber("Введите число x: ");
            cout << reverseListNums(x) << "\n";
            break;

        case 11:
            cout << "Дана сигнатура функции: int pow (int x, int y); Необходимо реализовать функцию таким образом, чтобы она возвращала результат возведения x в степень y. Подсказка: для получения степени необходимо умножить единицу на число x, и сделать это y раз, т.е.два в третьей степени это 1 * 2 * 2 * 2 \n";
            cout << "Пример: \n";
            cout << "x=2 \n";
            cout << "y=5 \n";
            cout << "результат: 32 \n";
            cout << "Результат: " << pow() << "\n";
            break;
        case 12:
            cout << "Вы выбрали следующую задачу:Дана сигнатура функции: bool equalNum (int x)\n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она возвращала true, если все знаки числа одинаковы, и false в ином случае. \n";
            cout << "Пример 1: \n";
            cout << "x=1111 \n";
            cout << "результат: true \n";
            equalNum();
            break;
        case 13:
            cout << "Вы выбрали следующую задачу:;\n";
            cout << "Дана сигнатура функции: void leftTriangle (int x); \n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она выводила на экран треугольник из символов ‘ * ’ у которого х символов в высоту, а количество символов в ряду совпадает с номером строки. \n";
            cout << "Пример 1: \n";
            cout << "x=2 \n";
            cout << "результат: \n";
            cout << "* \n";
            cout << "** \n";
            leftTriangle();
            break;
        case 14:
            cout << "Вы выбрали следующую задачу:;\n";
            cout << "Дана сигнатура функции: void guessGame()  \n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она генерировала случайное число от 0 до 9, далее считывала с консоли введенное пользователем число и выводила, угадал ли пользователь то, что было загадано, или нет.Функция запускается до тех пор, пока пользователь не угадает число.После этого выведите на экран количество попыток, которое потребовалось пользователю, чтобы угадать число. \n";
            cout << "Пример: \n";
            cout << "Введите число от 0 до 9: \n";
            cout << "5 \n";
            cout << "Вы не угадали, введите число от 0 до 9: \n";
            cout << "9 \n";
            cout << "Вы угадали! \n";
            cout << "Вы отгадали число за 2 попытки \n";
            guessGame();
            break;
        case 15: {
            cout << "Вы выбрали следующую задачу:Дана сигнатура функции: int findLast (int arr[], int x);\n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она возвращала индекс последнего вхождения числа x в массив arr.Если число не входит в массив –  возвращается - 1. \n";
            cout << "Пример:  \n";
            cout << "arr=[1,2,3,4,2,2,5] \n";
            cout << "x=2 \n";
            cout << " результат: 5\n";
            cout << "Как основной взят массив из примера \n";
            
            break;
        }
        case 16: {
            cout << "Вы выбрали следующую задачу:Дана сигнатура функции: int * add (int arr[], int x, int pos);\n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она возвращала новый , который будет содержать все элементы массива arr, однако в позицию pos будет вставлено значение x. \n";
            cout << "Пример: \n";
            cout << "arr=[1,2,3,4,5] \n";
            cout << " x = 9 \n";
            cout << "pos=3 \n";
            cout << "результат: [1,2,3,9,4,5] \n";
            cout << "Взят массив из примера \n";
            
            break;
        }
        case 17: {
            cout << "Вы выбрали следующую задачу:Дана сигнатура функции:  void reverse (int arr[]);\n";
            cout << "Необходимо реализовать функцию таким образом, чтобы он изменял массив arr. После проведенных изменений массив должен быть записан задом - наперед. \n";
            cout << "Пример: \n";
            cout << "arr=[1,2,3,4,5] \n";
            cout << "результат: [5,4,3,2,1] \n";
            
            break;
        }
        case 18: {
            cout << "Вы выбрали следующую задачу:Дана сигнатура функции: int * concat (int arr1[],int arr2[]);\n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она возвращала новый массив, в котором сначала идут элементы первого массива(arr1), а затем второго(arr2). \n";
            cout << "Пример: \n";
            cout << "arr1=[1,2,3] \n";
            cout << "arr2=[7,8,9] \n";
            cout << "результат: [1,2,3,7,8,9] \n";
            cout << "Массив взят ил примера \n";
           
            break;
        }
        case 19: {
            cout << "Вы выбрали следующую задачу:Дана сигнатура функции: int * deleteNegative (int arr[]);\n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она возвращала новый массив, в котором записаны все элементы массива arr кроме отрицательных. \n";
            cout << "Пример: \n";
            cout << "arr=[1,2,-3,4,-2,2,-5] \n";
            cout << "результат: [1,2,4,2] \n";
            
            
            break;
        }
        case 20: {
            cout << "Вы выбрали следующую задачу:Дана сигнатура функции: String age (int x); \n";
            cout << "Необходимо реализовать функцию таким образом, чтобы она возвращала строку, в которой сначала будет число х, а затем одно из слов : год года лет \n";
            cout << "Пример 1: \n";
            cout << "x=5 \n";
            cout << "результат: “5 лет” \n";
            cout << "Пример 2: \n";
            cout << "x=31 \n";
            cout << "результат: “31 год” \n";
            age();
            break;
        }
        default:
            cout << "Неверный номер задачи.\n";
        }
        return 0;
    }

